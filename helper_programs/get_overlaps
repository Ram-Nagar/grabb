#!/usr/bin/perl -w
use strict;

#######################################################################
#                          get_overlaps.pl                            #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# This program reads the contigs from a fasta file and checks if they #
# are overlaping with each other by using a minimal overlap size that #
# is specified at invocation. Finally, prints the all the overlaps    #
# found.                                                              #
#######################################################################

# Get the input
# Print usage message if not right number of inputs
die "Usage:\n\t$0 <contigs.fasta> <overlap>\n" unless scalar @ARGV == 2;

# Inputs: fasta file, minimum length of overlap and output file
my ($in, $len) = @ARGV;

# Load fasta file into a hash (keys: ids and values: sequences)
my %fasta;
&fasta2hash(\$in, \%fasta, []);

# Create a contig object for each entry in the fasta file
# Store the contigs in an array
my @contigs;
for (sort keys %fasta) {
    my $seq = $fasta{$_};
    # Create the contig with the id name as name
    push @contigs, contig->new($_, $seq);
}

# Find overlaps between them
#    The overlap information is stored inside the contig objects
&test_overlaps(\@contigs);

# print out the overlaps found for each of the contig ends
for my $a (@contigs) {
    my @before = @{$a->get_before()};
    print "" . $a->name() . "\n";
    print "\tbefore:\n";
    for (@before) {
        print "\t\t" . $_->[0] . ":\t" . $_->[1]->name() . " (" . $_->[2] . ")\n";
    }
    my @after = @{$a->get_after()};
    print "\tafter:\n";
    for (@after) {
        print "\t\t" . $_->[0] . ":\t" . $_->[1]->name() . " (" . $_->[2] . ")\n";
    }
}
print "\n";

###############################################################################################################
sub fasta2hash{                                                                                               # fasta2hash
    # This subroutine reads in a fasta file (input) and saves it into a hash (output), saves ids to an array  # fasta2hash
    #    keys: ids    values: sequences                                                                       # fasta2hash
    my ($file_ref, $hash_ref, $order_ref) = @_;                                                               # fasta2hash
    my $current;                                                                                              # fasta2hash
    open my $fasta, '<', $$file_ref;                                                                          # fasta2hash
    for (<$fasta>) {                                                                                          # fasta2hash
        s/\R//g;                           # Remove line endings                                              # fasta2hash
        next if /^\s*$/;                   # Skip empty lines                                                 # fasta2hash
        if (/^>(.*)/) {                    # Get the ID                                                       # fasta2hash
            $current = $1;                 # save the ID                                                      # fasta2hash
            push @$order_ref, $current;                                                                       # fasta2hash
        } else {                                                                                              # fasta2hash
	    die "ERROR: the input is not correct FASTA format\n" unless $current;
            $$hash_ref{$current} .= $_;    # append line to the current sequence                              # fasta2hash
        }                                                                                                     # fasta2hash
    }                                                                                                         # fasta2hash
    close $fasta;                                                                                             # fasta2hash
}                                                                                                             # fasta2hash
###############################################################################################################
#############################################################################################################
sub overlap{                                                                                                # overlap
    # This subroutine takes two strings and checks if the start of the first overlaps with the end of the   # overlap
    #    second string. It returns the sequence of the overlap (empty if nothing is found)                  # overlap
    # This subroutine runs in a recursive manner                                                            # overlap
    my ($left_ref, $right_ref) = @_;                                                                        # overlap
    my $left = $$left_ref;                                                                                  # overlap
    my $right = $$right_ref;                                                                                # overlap
                                                                                                            # overlap
    # If the two strings are equal return it                                                                # overlap
    if ($right eq $left) {                                                                                  # overlap
        return $right;                                                                                      # overlap
                                                                                                            # overlap
    # If one is empty return empty                                                                          # overlap
    } elsif ((! $right) || (! $left)){                                                                      # overlap
        return;                                                                                             # overlap
                                                                                                            # overlap
    # ELSE reduce the string sizes and recurse                                                              # overlap
    } else {                                                                                                # overlap
        # Get the first $len characters                                                                     # overlap
        my $min = substr $right, 0, $len;                                                                   # overlap
                                                                                                            # overlap
        # Match the minimal overlap and keep the postmatch data                                             # overlap
        if ($left =~ /$min/p) {                                                                             # overlap
            # Store the postmatch region                                                                    # overlap
            my $post = ${^POSTMATCH};                                                                       # overlap
                                                                                                            # overlap
            # If there is no postmatched region than the minimal sequence matched the end of the left       # overlap
            #    string so return the minimal sequence                                                      # overlap
            unless ($post) {                                                                                # overlap
                return $min;                                                                                # overlap
            } else {                                                                                        # overlap
                # Check if the match and postmatch matches with the start of the right string               # overlap
                if ($right =~ /^$min$post/) {                                                               # overlap
                    # Return overlap if yes                                                                 # overlap
                    return $min . $post;                                                                    # overlap
                } else {                                                                                    # overlap
                    # Check if the search term matches inside the previous hit                              # overlap
                    #my $str = substr($min, 1, $len - 1) . substr($post, 0, $len - 1);                      # overlap
                    my $str = substr($min, 1) . $post;                                                      # overlap
                    # If yes then for the next iteration reduce the size of the string by one               # overlap
                    if ($str =~ /$min/) {                                                                   # overlap
                        my $next = substr($min, 1) . $post;                                                 # overlap
                        return &overlap(\$next, \$right);                                                   # overlap
                    } else {                                                                                # overlap
                        # Use only the postmatch, because there is no nearer hit possible                   # overlap
                        return &overlap(\$post, \$right);                                                   # overlap
                    }                                                                                       # overlap
                }                                                                                           # overlap
            }                                                                                               # overlap
        } else {                                                                                            # overlap
            # If the minimal didn't match at all then return empty                                          # overlap
            return;                                                                                         # overlap
        }                                                                                                   # overlap
    }                                                                                                       # overlap
}                                                                                                           # overlap
#############################################################################################################
#############################################################################################################
sub test_overlaps{                                                                                          # test_overlaps
    # This subroutine takes an array refernce as input, elements of the array are contig objects            # test_overlaps
    #    This subroutine tests the overlap between each pair of contigs for both ends of the contig         # test_overlaps
    my $list_ref = shift;                                                                                   # test_overlaps
    for my $a (@$list_ref) {                                                                                # test_overlaps
        for my $b (@$list_ref) {                                                                            # test_overlaps
            # See if the 5' end of $b overlaps with either end of $a                                        # test_overlaps
            $a->find_before($b);                                                                            # test_overlaps
            # See if the 3' end of $b overlaps with either end of $a                                        # test_overlaps
            $a->find_after($b);                                                                             # test_overlaps
        }                                                                                                   # test_overlaps
    }                                                                                                       # test_overlaps
}                                                                                                           # test_overlaps
#############################################################################################################

#############################################################################################
package contig;                                                                             # package contig
# Contig objects                                                                            # package contig
#    stores the name of the contig                                                          # package contig
#    the sequence of the contig                                                             # package contig
#    the reverse complement of the sequence                                                 # package contig
#    an array of the contigs that overlap with the start                                    # package contig
                                                                                            # package contig
sub new{                                                                                    # package contig
    # Create a new contig                                                                   # package contig
    my $class = shift;                                                                      # package contig
    my ($name, $seq) = @_;                                                                  # package contig
    my $rev = reverse $seq;                                                                 # package contig
    $rev =~ tr/ACTG/TGAC/;                                                                  # package contig
    my $self = bless {                                                                      # package contig
                       name => $name,  # Name of the contig                                 # package contig
                       seq => $seq,    # Sequence of the contig                             # package contig
                       rev => $rev,    # Reverse complement of the sequence                 # package contig
                       before => [],   # List of overlaps for 5' end                        # package contig
                       after => [],    # List of overlaps for 3' end                        # package contig
                                       }, $class;                                           # package contig
    return $self;                                                                           # package contig
}                                                                                           # package contig
                                                                                            # package contig
sub name{                                                                                   # package contig
    # get the name of the contig                                                            # package contig
    my $self = shift;                                                                       # package contig
    return $$self{"name"};                                                                  # package contig
}                                                                                           # package contig
                                                                                            # package contig
sub seq{                                                                                    # package contig
    # Get the sequence of the contig                                                        # package contig
    my $self = shift;                                                                       # package contig
    return $$self{"seq"};                                                                   # package contig
}                                                                                           # package contig
                                                                                            # package contig
sub rev{                                                                                    # package contig
    # Get the reverse complement of the sequence of the contig                              # package contig
    my $self = shift;                                                                       # package contig
    return $$self{"rev"};                                                                   # package contig
}                                                                                           # package contig
                                                                                            # package contig
sub find_before{                                                                            # package contig
    # This subroutine takes two contigs as input: itself and a second contig                # package contig
    my $self = shift;                                                                       # package contig
    my $before = shift;                                                                     # package contig
                                                                                            # package contig
    # A variable to store the overlap                                                       # package contig
    my $overlap;                                                                            # package contig
    # If the second contig is the same as this contig then make the left string shorter     # package contig
    #    Otherwise it would say that it overlaps completely                                 # package contig
    # Check overlap                                                                         # package contig
    if ($self->name() eq $before->name()) {                                                 # package contig
        $overlap = &main::overlap(\(substr $before->seq(), $len), \$self->seq());           # package contig
    } else {                                                                                # package contig
        $overlap = &main::overlap(\$before->seq(), \$self->seq());                          # package contig
    }                                                                                       # package contig
                                                                                            # package contig
    # If there was an overlap found between them then save it to the array                  # package contig
    if ($overlap) {                                                                         # package contig
        push @{ $$self{"before"} }, [length $overlap, $before, "+"];                        # package contig
    } else {                                                                                # package contig
        # ELSE try if they overlap if the second one is reversed                            # package contig
        $overlap = &main::overlap(\$before->rev(), \$self->seq());                          # package contig
        if ($overlap) {                                                                     # package contig
            push @{ $$self{"before"} }, [length $overlap, $before, "-"];                    # package contig
        }                                                                                   # package contig
    }                                                                                       # package contig
}                                                                                           # package contig
                                                                                            # package contig
sub find_after{                                                                             # package contig
    # This subroutine takes two contigs as input: itself and a second contig                # package contig
    my $self = shift;                                                                       # package contig
    my $after = shift;                                                                      # package contig
                                                                                            # package contig
    # A variable to store the overlap                                                       # package contig
    my $overlap;                                                                            # package contig
    # If the second contig is the same as this contig then make the left string shorter     # package contig
    #    Otherwise it would say that it overlaps completely                                 # package contig
    # Check overlap                                                                         # package contig
    if ($self->name() eq $after->name()) {                                                  # package contig
        $overlap = &main::overlap(\(substr $self->seq(), $len), \$after->seq());            # package contig
    } else {                                                                                # package contig
        $overlap = &main::overlap(\$self->seq(), \$after->seq());                           # package contig
    }                                                                                       # package contig
                                                                                            # package contig
    # If there was an overlap found between them then save it to the array                  # package contig
    if ($overlap) {                                                                         # package contig
        push @{ $$self{"after"} }, [length $overlap, $after, "+"];                          # package contig
    } else {                                                                                # package contig
        # ELSE try if they overlap if the second one is reversed                            # package contig
        $overlap = &main::overlap(\$self->seq(), \$after->rev());                           # package contig
        if ($overlap) {                                                                     # package contig
            push @{ $$self{"after"} }, [length $overlap, $after, "-"];                      # package contig
        }                                                                                   # package contig
    }                                                                                       # package contig
}                                                                                           # package contig
                                                                                            # package contig
sub get_before{                                                                             # package contig
    # Get the list of overlaps for 5' end of the contig                                     # package contig
    #    each element an array reference                                                    # package contig
    #        [0] the size of the overlap                                                    # package contig
    #        [1] the contig object                                                          # package contig
    #        [2] the orientation (+/-) of the overlap                                       # package contig
    my $self = shift;                                                                       # package contig
    return $self->{"before"};                                                               # package contig
}                                                                                           # package contig
                                                                                            # package contig
sub get_after{                                                                              # package contig
    # Get the list of overlaps for 3' end of the contig                                     # package contig
    #    each element an array reference                                                    # package contig
    #        [0] the size of the overlap                                                    # package contig
    #        [1] the contig object                                                          # package contig
    #        [2] the orientation (+/-) of the overlap                                       # package contig
    my $self = shift;                                                                       # package contig
    return $self->{"after"};                                                                # package contig
}                                                                                           # package contig
#############################################################################################

#############
#    END    #
#############
